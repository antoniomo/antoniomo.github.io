<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AntonioMO</title>
    <link>http://antoniomo.com/index.xml</link>
    <description>Recent content on AntonioMO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 May 2017 07:46:32 +0300</lastBuildDate>
    <atom:link href="http://antoniomo.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Unique IDs in Golang, part 1</title>
      <link>http://antoniomo.com/blog/2017/05/21/unique-ids-in-golang-part-1/</link>
      <pubDate>Sun, 21 May 2017 07:46:32 +0300</pubDate>
      
      <guid>http://antoniomo.com/blog/2017/05/21/unique-ids-in-golang-part-1/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;This is a continuing series on &lt;em&gt;UID&lt;/em&gt; alternatives:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://antoniomo.com/blog/2017/05/21/unique-ids-in-golang-part-1/&#34;&gt;Part1&lt;/a&gt; Introduces the topic (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;No page found with path or logical name &#34;post/id2.md&#34;.
&#34;&gt;Part2&lt;/a&gt; Talks about &lt;em&gt;UUID&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whenever we deal with entities in a software system, from user accounts to blog
posts, or even to generate a database key, it&amp;rsquo;s common to want to be able to
refer to those with a unique, non-ambiguous identifier.&lt;/p&gt;

&lt;p&gt;On this part we&amp;rsquo;ll discuss sequential &lt;em&gt;UIDs&lt;/em&gt; as an introduction to the topic,
and afterwards we can start with more juicy and practical content on the rest
of the series.&lt;/p&gt;

&lt;h2 id=&#34;sequential-uids&#34;&gt;Sequential UIDs&lt;/h2&gt;

&lt;p&gt;On basic systems, these &lt;em&gt;Unique Identifiers (UID)&lt;/em&gt; could be just a sequential
or incremental counter, where each new entity gets the next item in the
sequence as its ID. If the system is rebooted, it will first have to store the
last assigned ID, load it and keep on going.&lt;/p&gt;

&lt;p&gt;But what happens if our system has to deal with multiple new entities
concurrently? Do we keep this counter under a mutex to serialize the sequence
generation? What if we have a distributed system and we have to create &lt;em&gt;UIDs&lt;/em&gt;
in parallel, without access to a shared counter, at least not without expensive
network communications?&lt;/p&gt;

&lt;p&gt;In these situations, sticking to purely sequential counters imposes some
limitations. For example, if we are going to operate on a single node, and/or
we count on shared memory, a &lt;em&gt;mutex&lt;/em&gt; or some other form of synchronization
would work, at the cost of performance.&lt;/p&gt;

&lt;p&gt;We could improve this by having a series of &lt;em&gt;UID&lt;/em&gt; generators. For example, if
our expected concurrency is 8 workers, each one of them could have their own
generator, starting separate counters on 1 to 8. Summing 8 would get their next
sequence number without collisions.&lt;/p&gt;

&lt;p&gt;This schema would also work in a distributed system with a fixed (and known
beforehand) number of nodes. We could even prefix it with a timestamp so that
even if the generators advance at different speeds, the generated UIDs are
somewhat sortable, at least within the
&lt;a href=&#34;https://en.wikipedia.org/wiki/Network_Time_Protocol&#34;&gt;NTP&lt;/a&gt; clock drift of each
node, which is typically within the 10s of &lt;em&gt;ms&lt;/em&gt;, although sometimes it can go
up to half a second.&lt;/p&gt;

&lt;p&gt;What happens if we want to be able to add/remove nodes from our system? We
could have a set number of nodes with a service that assigns the &lt;em&gt;UIDs&lt;/em&gt;, and
the other nodes just request new &lt;em&gt;UIDs&lt;/em&gt; to those, but that imposes expensive
network communications and is still an scalability bottleneck as adding more of
these &lt;em&gt;UID&lt;/em&gt; nodes isn&amp;rsquo;t trivial.&lt;/p&gt;

&lt;p&gt;As we can see, &lt;em&gt;sequential UIDs&lt;/em&gt; are perhaps not the best idea if we want to be
able to flexibly add/remove nodes to a distributed system, and they quickly
stop being &lt;em&gt;simple&lt;/em&gt; when you want to deal with the above nuisances. Enter
&lt;em&gt;random-UIDs&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;random-uids&#34;&gt;Random UIDs&lt;/h2&gt;

&lt;p&gt;In these schema, the &lt;em&gt;UIDs&lt;/em&gt; are just randomly assigned from a number space much
bigger than the total number of entities we expect to handle in the entire
lifespawn of our system. The bigger the &lt;em&gt;UID&lt;/em&gt; number space with respect to the
number of entities to be identified, the lower the probability of getting
a duplicate, to the point that we can totally dismiss the possibility of having
one, assuming a good quality random number generator.&lt;/p&gt;

&lt;p&gt;Perhaps the most well known, standard way to get a &lt;em&gt;UID&lt;/em&gt; following this schema
is the &lt;em&gt;Universally Unique Identifier (UUID)&lt;/em&gt;, which will form the basis for
part two, where we&amp;rsquo;ll be describing the format, comparing some golang libraries
to use it, and discussing why we might not want to use it all the time and some
alternatives (some hints: &lt;em&gt;ordering, locality, wasteful representation&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Unique_identifier&#34;&gt;Unique Identifier&lt;/a&gt; Wikipedia article&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Universally_unique_identifier&#34;&gt;UUID&lt;/a&gt; Wikipedia article&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://book.mixu.net/distsys/time.html&#34;&gt;Distributed Systems for Fun and Profit&lt;/a&gt; Good time and order discussion&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://antoniomo.com/about/</link>
      <pubDate>Sat, 20 May 2017 09:30:39 +0300</pubDate>
      
      <guid>http://antoniomo.com/about/</guid>
      <description>

&lt;p&gt;Hi!&lt;/p&gt;

&lt;p&gt;My name is Antonio and I&amp;rsquo;m a software developer. I&amp;rsquo;m from &lt;a href=&#34;https://www.youtube.com/results?search_query=tenerife+time+lapse&#34;&gt;Tenerife,
Spain&lt;/a&gt;, but
now living in &lt;a href=&#34;https://www.youtube.com/results?search_query=finland+time+lapse&#34;&gt;Helsinki,
Finland&lt;/a&gt;. Over
the years I have lived and worked in Bilbao, Madrid, Brussels, Montreal and San
Francisco, and hold great memories of each place.&lt;/p&gt;

&lt;p&gt;Professionally, I used to work on the backend side of things, but for some years
I decided to move into machine learning, getting a MSc. on the topic.  However,
after a few years in and around that field I decided that pure backend
engineering and distributed systems is what I enjoy doing the most, so nowadays
I do that. I use the Go language whenever possible, but of course the occasional
shell or python script is useful as well. My tool set is Linux, i3 with a bunch
of terminals, Vim, Git, and a browser.&lt;/p&gt;

&lt;p&gt;Personally, I enjoy cooking with or for friends, eating, board games, and doing
exercise in the form of martial arts, but I can be convinced to go on running or
climbing as well.&lt;/p&gt;

&lt;h1 id=&#34;contact&#34;&gt;Contact&lt;/h1&gt;

&lt;p&gt;I usually hang around at the &lt;a href=&#34;https://gophers.slack.com&#34;&gt;gophers slack&lt;/a&gt; under my
&lt;code&gt;@antoniomo&lt;/code&gt; handle. Other than that, for professional contact just contact me on
my &lt;a href=&#34;https://www.linkedin.com/in/antoniomo/&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://antoniomo.com/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://antoniomo.com/license/</guid>
      <description>&lt;p&gt;All blog content is shared under this license:&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;&lt;img alt=&#34;Creative Commons License&#34; style=&#34;border-width:0&#34; src=&#34;https://i.creativecommons.org/l/by/4.0/88x31.png&#34; /&gt;&lt;/a&gt;&lt;br /&gt;This work is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;All source code published on this blog is under the following license, unless
otherwise explicitly stated:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;MIT License&lt;/p&gt;

&lt;p&gt;Copyright &amp;copy; 2017 Antonio Manuel Mac√≠as Ojeda&lt;/p&gt;

&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED &amp;ldquo;AS IS&amp;rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>